General Flowchart:
	1 aiScene = many aiMeshes
	1 aiMesh = many mFaces, many mVertices
	1 mFace = 3 indices

List of variables each assimp object contains:

aiScene:
	unsigned int mNumMeshes;	//number of meshes in one scene
	aiMesh **mMeshes; 			//array of aiMeshes of size mNumMeshes

aiMesh:
	unsigned int mNumFaces; 	//number of primitives in one mesh
	aiFace *mFaces; 			//pointer to an array of aiFaces of size mNumFaces
	aiVector3D *mVertices;		//array of vertex positions

mFaces:
	unsigned int *mIndices; 	//pointer to an array of indices
	unsigned int mNumIndices;	//number of indices in a face

//////////////////////////////things to add//////////////////////////////////////////
Object.h:

private:
	std::vector<Vertex> vertices;  //already added
	//std::vector<glm::vec2> uvs;
	//std::vector<glm::vec3> normals;

Object.cpp - Object::Object():

struct Vertex
{
	GLfloat position[3];
	GLfloat color[3];
} v;

int faceNumber;
int indiceNumber;
int vertexNumber;
aiMesh *mesh;

for (int meshNums = 0; meshNums < meshNumber; meshNums++)
{
	mesh = scene->mMeshes[meshNums]; //holds current mesh
	scene->mMaterials[meshNums+1]->Get(color stuff);
	faceNumber = scene->mMeshes[meshNums]->mNumFaces //holds the number of faces in the current mesh
	for(int faceNums = 0; faceNums < faceNumber; faceNums++) //loop through each face
	{
		indiceNumber = scene->mMeshes[meshNums]->mFaces[faceNums]->mNumIndices; //holds number of indices in current face
		for(int i = 0; i < indiceNumber; i++) //loop through each index
		{
			//places the vertex in the position of the ith index into the Vertex position
			//so if mIndices = [5, 3, 7], v.position will take in the 5th vertex, the 3rd vertex, then the 7th vertex
			v.position[i] = [mesh->mVertices[mesh->mFaces[faceNums]->mIndices[i]]];
		}
		vertices.push_back(v);
	}
}